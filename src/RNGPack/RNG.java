package RNGPack;
import java.io.IOException;
import java.util.*;
import org.rosuda.JRI.Rengine;

/**
 * For question 1
 * @author mali
 * This class is used to test if a random number generator (RNG) can generate real random
 * number.
 * methods are created as follow:
 * inputSeed(), initiator(), generateRandomNumbers(int listSize, boolean resetSeed, int type)
 */

public class RNG {
	// Seed will be initiated by calling inputSeed()
	private long seed;
	private Scanner scanner;
	
	// This list is used to collect random numbers generated by one run
	private List<Double> list;
	
	// SPN is a new class includes a List<List<Double>> sequence and String nameOfSequence
	// One sequence may contain multiple lists.
	// The nameOfSequence will be used as a parameter to pass into the plotting function
	private List<SPN> total;
	
	// 
	private boolean seedReset; 
	private SPN recorder;
	private String nameOfSequence;
	
	// This Rengine comes from an external library rJava
	private Rengine re;
	
	// numberOfList defines the size of sequence in SPN
	private Integer numberOfList;
	
	// The variable size is used to identify how many random numbers we need
	// Integers larger than 0 are all legal inputs
	private int listSize = 0;
		
	// This method is used to initialize the seed by inputing 
	// number through keyboard
	// IOException may be thrown out due to the class Scanner throws such an exception
	private void inputSeed() throws IOException {
		int option = 0;
		System.out.println("Reset a seed for all runs, please enter 1");
		System.out.println("Reset differen seeds for each run, please enter 2");
		scanner = new Scanner(System.in);
		option = scanner.nextInt();
		if (option == 1) {
			System.out.println("Enter the common seed");
			Scanner temp = new Scanner(System.in);
			seed = temp.nextLong();
			Rhelper.setSeed(seed);
		} else if (option == 2) {
			seedReset = true;
		} else {
			System.out.println("Illegal option");
			try {
				// Restart initiator() if an illegal input exist
				initiator();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	// This method allows us to define the type and the amount of random numbers we need
	// Also, we can decide whether the seed should be updated 
	// IOExceptions may be thrown out due to the Scanner objects
	public List<SPN> initiator() throws IOException {
		System.out.println("Enter the number of amount for random numbers in one list");
		scanner = new Scanner(System.in);
		listSize = scanner.nextInt();
		// listSize cannot be smaller than 1
		// When listSize == 0, an empty list should be thrown out. This is not an error,
		// but it does not make sense. So 0 is defined as illegal
		if (listSize <= 0) {
			System.out.println("Illegal input");
			try {
				// Once an illegal input is detected, restart the initiator()
				initiator();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		// resetSeed can decide the seed should be kept the same or be reset
		// Only yes or no are legal
		String resetSeed = null;
		// Making a choice to decide whether the seed need to be changed or not
		System.out.println("Identify whether you want to reset the seed");
		scanner = new Scanner(System.in);
		resetSeed = scanner.nextLine();
		
		// initiating Rengine here to make sure that seed can be setup
		
		// If resetSeed == true, then the seed should be updated
		if (resetSeed.equalsIgnoreCase("yes")) {
			try {
				inputSeed();
			} catch(IOException e) {
				e.printStackTrace();
			}
		} else if (resetSeed.equalsIgnoreCase("no")) {
			System.out.println("Ok, next step");
		} else {
			try {
				// Once an illegal input is detected, restart the initiator()
				initiator();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		// Defining how many sequences we expect
		System.out.println("How many lists do you want to generate, please enter a integer larger than 0");
		scanner = new Scanner(System.in);
		numberOfList = scanner.nextInt();
		if (numberOfList <= 0) {
			System.out.println("Illegal number");
			try {
				// Restart initiator() if an illegal input exist
				initiator();
			} catch (InputMismatchException e) {
				System.out.println("Please enter an integer");
				initiator();
			}
		}
		
		// Now we can name each result we return 
		System.out.println("Name this sequence");
		scanner = new Scanner(System.in);
		nameOfSequence = scanner.nextLine();
		
		return generateRandomNumbers();
	}
	
	// Once the initiator() calls this method with legal parameters, then an expected
	// list will be returned
	private List<SPN> generateRandomNumbers() {
		total = new ArrayList<SPN>();
		recorder = new SPN(nameOfSequence);
		if (seedReset) {
			
			// In if part, the seed will be reset for each run
			while (numberOfList > 0) {
				list = new ArrayList<Double>();
				//rng.setSeed(numberOfList - j);
				list = Rhelper.getInstance(listSize, true, numberOfList);
				numberOfList--;
				// Add a List<Double> to the List<List<Double>> sequence
				recorder.setSequence(list);
			}
			total.add(recorder);
		} else {
			while (numberOfList > 0) {
				list = new ArrayList<Double>();
				list = Rhelper.getInstance(listSize, false, numberOfList);
				numberOfList--;
				recorder.setSequence(list);			
			}
			total.add(recorder);	
		}
		return total;
	}
}
